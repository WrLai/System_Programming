{\rtf1\ansi\ansicpg1252\cocoartf2569
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red253\green143\blue63;\red31\green31\blue36;\red252\green106\blue93;
\red108\green121\blue134;\red255\green255\blue255;\red252\green95\blue163;\red93\green216\blue255;\red208\green191\blue105;
\red65\green161\blue192;\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81569\c74902\c41177;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include \cf4 <stdio.h>\cf2              \cf5 // for I/O\cf6 \
\cf2 #include \cf4 <stdlib.h>\cf2             \cf5 // for I/O\cf6 \
\cf2 #include \cf4 <libgen.h>\cf2             \cf5 // for dirname()/basename()\cf6 \
\cf2 #include \cf4 <string.h>\cf6 \
\cf2 #include \cf4 <unistd.h>\cf6 \
\cf2 #include \cf4 <fcntl.h>\cf6 \
\cf2 #include \cf4 <sys/stat.h>\cf6 \

\f1\b \cf7 typedef
\f0\b0 \cf6  
\f1\b \cf7 struct
\f0\b0 \cf6  \cf8 node\cf6 \{\
    
\f1\b \cf7 char
\f0\b0 \cf6   name[\cf9 64\cf6 ];       \cf5 // node's name string\cf6 \
    
\f1\b \cf7 char
\f0\b0 \cf6   type;\
    
\f1\b \cf7 struct
\f0\b0 \cf6  \cf8 node\cf6  *child, *sibling, *parent;\
\}NODE;\
\

\f1\b \cf7 char
\f0\b0 \cf6  \cf10 gpath\cf6 [\cf9 256\cf6 ];\

\f1\b \cf7 char
\f0\b0 \cf6  \cf10 name\cf6 [\cf9 16\cf6 ][\cf9 64\cf6 ];           \cf5 // OR   char *name[16];\cf6 \

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 n\cf6 ;\
\
\cf10 NODE\cf6  *\cf10 root\cf6 , *\cf10 cwd\cf6 , *\cf10 start\cf6 ;\

\f1\b \cf7 char
\f0\b0 \cf6  \cf10 line\cf6 [\cf9 128\cf6 ];\

\f1\b \cf7 char
\f0\b0 \cf6  \cf10 command\cf6 [\cf9 16\cf6 ], \cf10 pathname\cf6 [\cf9 64\cf6 ], \cf10 bname\cf6 [\cf9 64\cf6 ], \cf10 dname\cf6 [\cf9 64\cf6 ];\
\
\cf5 //               0       1      2      3       4       5       6\cf6 \

\f1\b \cf7 char
\f0\b0 \cf6  *\cf10 cmd\cf6 [] = \{\cf4 "mkdir"\cf6 , \cf4 "ls"\cf6 , \cf4 "quit"\cf6 , \cf4 "cd"\cf6 , \cf4 "creat"\cf6 , \cf4 "rmdir"\cf6 , \cf4 "rm"\cf6 , \cf4 "pwd"\cf6 , \cf9 0\cf6 \};\
\cf10 NODE\cf6  *\cf10 path2node\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname);\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 findCmd\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *command)\
\{\
    
\f1\b \cf7 int
\f0\b0 \cf6  i = \cf9 0\cf6 ;\
    
\f1\b \cf7 while
\f0\b0 \cf6 (cmd[i])\{\
        
\f1\b \cf7 if
\f0\b0 \cf6  (strcmp(command, cmd[i])==\cf9 0\cf6 )\
            
\f1\b \cf7 return
\f0\b0 \cf6  i;\
        i++;\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 rm_NODE\cf6 (NODE *mp)\
\{\
    NODE *parent, *cur, *prev;\
    \
    parent = mp->parent;\
    cur = parent->child;\
    prev = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    \
    
\f1\b \cf7 while
\f0\b0 \cf6 (cur != mp)\
    \{\
        prev = cur;\
        cur = cur->sibling;\
    \}\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6 (prev != 
\f1\b \cf7 NULL
\f0\b0 \cf6 )\
    \{\
        prev->sibling = mp->sibling;\
    \}\
    
\f1\b \cf7 else
\f0\b0 \cf6 \
    \{\
        parent->child = cur->sibling;\
    \}\
    \
    cur->parent = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    cur->sibling = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    cur->child = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    \
    free(cur);\
    mp = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    cur = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\
\
\cf10 NODE\cf6  *\cf10 search_child\cf6 (NODE *parent, 
\f1\b \cf7 char
\f0\b0 \cf6  *name)\
\{\
    NODE *p = parent->child;\
    \cf5 //printf("search for %s in parent DIR\\n", name);\cf6 \
    
\f1\b \cf7 if
\f0\b0 \cf6  (p==\cf9 0\cf6 )\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    
\f1\b \cf7 while
\f0\b0 \cf6 (p)\{\
        
\f1\b \cf7 if
\f0\b0 \cf6  (strcmp(p->name, name)==\cf9 0\cf6 )\
            
\f1\b \cf7 return
\f0\b0 \cf6  p;\
        p = p->sibling;\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 insert_child\cf6 (NODE *parent, NODE *q)\
\{\
    NODE *p = parent->child;\
    \cf5 //printf("insert NODE %s into parent child list\\n", q->name);\cf6 \
    
\f1\b \cf7 if
\f0\b0 \cf6  (p==\cf9 0\cf6 )\
        parent->child = q;\
    
\f1\b \cf7 else
\f0\b0 \cf6 \{\
        
\f1\b \cf7 while
\f0\b0 \cf6 (p->sibling)\
            p = p->sibling;\
        p->sibling = q;\
    \}\
    q->parent = parent;\
    q->sibling = \cf9 0\cf6 ;\
    q->child = \cf9 0\cf6 ;\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 dbname\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6 * pathname)\
\{\
    
\f1\b \cf7 char
\f0\b0 \cf6  temp[\cf9 64\cf6 ];\
    \
    strcpy(temp, pathname);\
    strcpy(dname, dirname(temp));\
    strcpy(temp, pathname);\
    strcpy(bname, basename(temp));\
    \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 my_mkdir\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *name)\
\{\
    NODE *p, *q;\
    \cf5 //printf("mkdir: name=%s\\n", name);\cf6 \
    \
    
\f1\b \cf7 if
\f0\b0 \cf6  (strcmp(name, \cf4 "/"\cf6 )==\cf9 0\cf6 )\{\
        printf(\cf4 "can't mkdir with /\\n"\cf6 );\
        
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
    \}\
    dbname(pathname);\
    
\f1\b \cf7 if
\f0\b0 \cf6  (dname[\cf9 0\cf6 ] == \cf11 '.'\cf6 )\{\
        dname[\cf9 0\cf6 ] = \cf11 '/'\cf6 ;\
    \}\
    start = path2node(dname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6  (start == \cf9 0\cf6  || start->type != \cf11 'D'\cf6 )\
    \{\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \}\
    \
    \
    \cf5 //printf("check whether %s already exists\\n", name);\cf6 \
    p = search_child(start, name);\
    
\f1\b \cf7 if
\f0\b0 \cf6  (p)\{\
        printf(\cf4 "name %s already exists, mkdir FAILED\\n"\cf6 , name);\
        
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
    \}\
    \
    \cf5 //printf("ready to mkdir %s\\n", name);\cf6 \
    q = (NODE *)malloc(
\f1\b \cf7 sizeof
\f0\b0 \cf6 (NODE));\
    q->type = \cf11 'D'\cf6 ;\
    strcpy(q->name, bname);\
    insert_child(start, q);\
    \cf5 //printf("mkdir %s OK\\n", bname);\cf6 \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 ls\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    NODE *p = cwd->child;\
    
\f1\b \cf7 if
\f0\b0 \cf6 (pathname[\cf9 0\cf6 ] != \cf11 '\\0'\cf6 )\
    \{\
        p = path2node(pathname);\
        
\f1\b \cf7 if
\f0\b0 \cf6 (p->type == \cf11 'F'\cf6 )\
        \{\
            
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
        \}\
        p = p->child;\
        \
        
\f1\b \cf7 while
\f0\b0 \cf6 (p)\{\
            printf(\cf4 "[%c %s] \\n"\cf6 , p->type, p->name);\
            p = p->sibling;\
        \}\
    \}\
    \
    \cf5 //printf("cwd contents = ");\cf6 \
    
\f1\b \cf7 if
\f0\b0 \cf6  (!p)\{\
        printf(\cf4 "empty"\cf6 );\
    \}\
    
\f1\b \cf7 while
\f0\b0 \cf6 (p)\{\
        printf(\cf4 "[%c %s] \\n"\cf6 , p->type, p->name);\
        p = p->sibling;\
    \}\
    printf(\cf4 "\\n"\cf6 );\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\
\cf5 // NOTE: You MUST improve ls() to ls(char *pathname)\cf6 \
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 cd\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    NODE *mp;\
    
\f1\b \cf7 char
\f0\b0 \cf6  temp[\cf9 64\cf6 ] = \cf4 ""\cf6 ;\
    
\f1\b \cf7 char
\f0\b0 \cf6 * temp2 = \cf4 ""\cf6 ;\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6 (pathname[\cf9 0\cf6 ] == \cf11 '\\0'\cf6 )\
    \{\
        cwd = root;\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \}\
    \
    strcpy(temp, pathname);\
    \
    temp2 = strtok(temp, \cf4 "/"\cf6 );\
    \
    
\f1\b \cf7 while
\f0\b0 \cf6 (strcmp(temp2, \cf4 ".."\cf6 ) == \cf9 0\cf6  && cwd != root)\
    \{\
        cwd = cwd->parent;\
        \
        temp2 = strtok(
\f1\b \cf7 NULL
\f0\b0 \cf6 ,\cf4 "/"\cf6 );\
        
\f1\b \cf7 if
\f0\b0 \cf6 (temp2 == 
\f1\b \cf7 NULL
\f0\b0 \cf6  || cwd == root)\
        \{\
            
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
        \}\
    \}\
    \
    mp = path2node(pathname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6  (mp != 
\f1\b \cf7 NULL
\f0\b0 \cf6  && mp->type == \cf11 'D'\cf6 )\
    \{\
        cwd = mp;\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \
\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 my_creat\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    NODE *p, *q;\
    \cf5 //printf("create: name=%s\\n", pathname);\cf6 \
    \
    
\f1\b \cf7 if
\f0\b0 \cf6  (strcmp(pathname, \cf4 "/"\cf6 )==\cf9 0\cf6 )\{\
        printf(\cf4 "can't create with /\\n"\cf6 );\
        
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
    \}\
    dbname(pathname);\
    
\f1\b \cf7 if
\f0\b0 \cf6  (dname[\cf9 0\cf6 ] == \cf11 '.'\cf6 )\
    \{\
        dname[\cf9 0\cf6 ] = \cf11 '/'\cf6 ;\
    \}\
    \
    start = path2node(dname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6  (start == \cf9 0\cf6  || start->type != \cf11 'D'\cf6 )\
    \{\
        
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
    \}\
    \
    \cf5 //printf("check whether %s already exists\\n", pathname);\cf6 \
    p = search_child(start, bname);\
    
\f1\b \cf7 if
\f0\b0 \cf6  (p)\{\
        printf(\cf4 "name %s already exists, create FAILED\\n"\cf6 , pathname);\
        
\f1\b \cf7 return
\f0\b0 \cf6  -\cf9 1\cf6 ;\
    \}\
    \
    \cf5 //printf("ready to create %s\\n", pathname);\cf6 \
    q = (NODE *)malloc(
\f1\b \cf7 sizeof
\f0\b0 \cf6 (NODE));\
    q->type = \cf11 'F'\cf6 ;\
    strcpy(q->name, bname);\
    insert_child(start, q);\
    \cf5 //printf("create %s OK\\n", pathname);\cf6 \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 print_recur\cf6 (NODE *mp)\
\{\
    
\f1\b \cf7 if
\f0\b0 \cf6 (mp != root)\
    \{\
        strcpy(name[n++], mp->name);\
        print_recur(mp->parent);\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 my_pwd\cf6 ()\
\{\
    n = \cf9 0\cf6 ;\
    
\f1\b \cf7 int
\f0\b0 \cf6  i= \cf9 0\cf6 ;\
    
\f1\b \cf7 if
\f0\b0 \cf6 (cwd == root)\
    \{\
        printf(\cf4 "/\\n"\cf6 );\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \}\
    print_recur(cwd);\
    
\f1\b \cf7 for
\f0\b0 \cf6 (i = n-\cf9 1\cf6 ; i >= \cf9 0\cf6 ; i++)\
    \{\
        printf(\cf4 "/%s"\cf6 , name[i]);\
    \}\
    printf(\cf4 "\\n"\cf6 );\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 my_rmdir\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    \cf5 // Write your code to remove a DIR\cf6 \
    NODE *mp;\
    mp = path2node(pathname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6 (mp != 
\f1\b \cf7 NULL
\f0\b0 \cf6  && mp->type == \cf11 'D'\cf6  && mp->child != 
\f1\b \cf7 NULL
\f0\b0 \cf6 )\
    \{\
        printf(\cf4 "Directory does not exist or is not empty\\n"\cf6 );\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \}\
    \
    rm_NODE(mp);\
    \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 1\cf6 ;\
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 rm\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    NODE *mp;\
    mp = path2node(pathname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6 (mp == 
\f1\b \cf7 NULL
\f0\b0 \cf6  && mp->type != \cf11 'F'\cf6 )\
    \{\
        
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
    \}\
    \
    rm_NODE(mp);\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 1\cf6 ;\
    \
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 recur_print\cf6 (FILE *fp, NODE *mp)\
\{\
    
\f1\b \cf7 if
\f0\b0 \cf6 (mp != 
\f1\b \cf7 NULL
\f0\b0 \cf6 )\
    \{\
        n = \cf9 0\cf6 ;\
        fprintf(fp, \cf4 " %c     "\cf6 , mp->type);\
        print_recur(mp);\
        
\f1\b \cf7 for
\f0\b0 \cf6 (
\f1\b \cf7 int
\f0\b0 \cf6  i = n-\cf9 1\cf6 ; i >= \cf9 0\cf6 ; i++)\
        \{\
            fprintf(fp, \cf4 "/%s"\cf6 , name[i]);\
        \}\
        fputc(\cf11 '\\n'\cf6 , fp);\
        recur_print(fp, mp->child);\
        recur_print(fp, mp->sibling);\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 save\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *filename)\
\{\
    
\f1\b \cf7 if
\f0\b0 \cf6 (filename[\cf9 0\cf6 ] == \cf11 '\\0'\cf6 )\
       \{\
           printf(\cf4 "None exists"\cf6 );\
           
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
       \}\
    FILE *fp = fopen(filename, \cf4 "w+"\cf6 );\
    fprintf(fp, \cf4 "type   pathname\\n"\cf6 );\
    fprintf(fp, \cf4 "----   --------\\n"\cf6 );\
    fprintf(fp, \cf4 " D     /\\n"\cf6 );\
    recur_print(fp, root->child);\
    \
    fclose(fp);\
    \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 quit\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *filename)\
\{\
    save(filename);\
    \
    exit(\cf9 0\cf6 );\
    \cf5 // improve quit() to SAVE the current tree as a Linux file\cf6 \
    \cf5 // for reload the file to reconstruct the original tree\cf6 \
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 initialize\cf6 ()\
\{\
    root = (NODE *)malloc(
\f1\b \cf7 sizeof
\f0\b0 \cf6 (NODE));\
    strcpy(root->name, \cf4 "/"\cf6 );\
    root->parent = root;\
    root->sibling = \cf9 0\cf6 ;\
    root->child = \cf9 0\cf6 ;\
    root->type = \cf11 'D'\cf6 ;\
    cwd = root;\
    printf(\cf4 "Root initialized OK\\n"\cf6 );\
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 tokenize\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    
\f1\b \cf7 char
\f0\b0 \cf6  *s;\
    \cf5 //printf("pathname=%s\\n", pathname);\cf6 \
    strcpy(gpath, pathname);\
    n = \cf9 0\cf6 ;\
    s = strtok(gpath, \cf4 "/"\cf6 );\
    \
    
\f1\b \cf7 while
\f0\b0 \cf6 (s)\{\
        strcpy(name[n++], s);    \cf5 // OR  name[n++] = s;\cf6 \
        s = strtok(\cf9 0\cf6 , \cf4 "/"\cf6 );\
    \}\
    \
\cf5 //    for (i=0; i < n; i++)\{\cf6 \
\cf5 //        //printf("name[%d]=%s\\n", i, name[i]);\cf6 \
\cf5 //    \}\cf6 \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\
\
\
\cf10 NODE\cf6  *\cf10 path2node\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *pathname)\
\{\
    NODE *start, *p = 
\f1\b \cf7 NULL
\f0\b0 \cf6 ;\
    
\f1\b \cf7 int
\f0\b0 \cf6  i;\
    
\f1\b \cf7 if
\f0\b0 \cf6 (pathname[\cf9 0\cf6 ] == \cf11 '/'\cf6 )\
    \{\
        start = root;\
    \}\
    
\f1\b \cf7 else
\f0\b0 \cf6 \
    \{\
        start = cwd;\
    \}\
    tokenize(pathname);\
    \
    
\f1\b \cf7 if
\f0\b0 \cf6 (n == \cf9 0\cf6 )\
    \{\
        
\f1\b \cf7 return
\f0\b0 \cf6  root;\
    \}\
    \
    
\f1\b \cf7 for
\f0\b0 \cf6  (i=\cf9 0\cf6 ; i < n; i++)\{\
        p = search_child(start, name[i]);\
        
\f1\b \cf7 if
\f0\b0 \cf6  (p==\cf9 0\cf6 )\
            
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
        start = p;\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf6  p;\
\}\
\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 reload\cf6 (
\f1\b \cf7 char
\f0\b0 \cf6  *filename)\
\{\
    FILE *fp = fopen(filename, \cf4 "r"\cf6 );\
    \
    initialize();\
    \
    \
    my_creat(pathname);\
    my_mkdir(pathname);\
    \
    
\f1\b \cf7 return
\f0\b0 \cf6  \cf9 0\cf6 ;\
\}\

\f1\b \cf7 int
\f0\b0 \cf6  \cf10 main\cf6 ()\
\{\
    
\f1\b \cf7 int
\f0\b0 \cf6  index;\
    initialize();\
    \
    printf(\cf4 "NOTE: commands = mkdir|ls|quit|cd|creat|rmdir|rm|pwd\\n"\cf6 );\
    \
    
\f1\b \cf7 while
\f0\b0 \cf6 (\cf9 1\cf6 )\{\
        printf(\cf4 "Enter command line : "\cf6 );\
        fgets(line, \cf9 128\cf6 , stdin);\
        line[strlen(line)-\cf9 1\cf6 ] = \cf9 0\cf6 ;\
        \
        command[\cf9 0\cf6 ] = pathname[\cf9 0\cf6 ] = \cf9 0\cf6 ;\
        sscanf(line, \cf4 "%s %s"\cf6 , command, pathname);\
        \cf5 //printf("command=%s pathname=%s\\n", command, pathname);\cf6 \
        \
        
\f1\b \cf7 if
\f0\b0 \cf6  (command[\cf9 0\cf6 ]==\cf9 0\cf6 )\
            
\f1\b \cf7 continue
\f0\b0 \cf6 ;\
        \
        index = findCmd(command);\
        \
        
\f1\b \cf7 switch
\f0\b0 \cf6  (index)\{\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 0\cf6 : my_mkdir(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 1\cf6 : ls(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 2\cf6 : quit(pathname);\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 3\cf6 : cd(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 4\cf6 : my_creat(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 5\cf6 : my_rmdir(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 6\cf6 : rm(pathname); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
            
\f1\b \cf7 case
\f0\b0 \cf6  \cf9 7\cf6 : my_pwd(); 
\f1\b \cf7 break
\f0\b0 \cf6 ;\
        \}\
    \}\
\}\
\
}